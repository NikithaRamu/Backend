package com.nikitha.fsd.auth.controller;

import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.nikitha.fsd.auth.model.Token;
import com.nikitha.fsd.auth.model.User;
import com.nikitha.fsd.auth.service.UserAuthService;
import com.nikitha.fsd.auth.util.exception.UserNotFoundException;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;


/*
 * As in this assignment, we are working on creating RESTful web service, hence annotate
 * the class with @RestController annotation. A class annotated with the @Controller annotation
 * has handler methods which return a view. However, if we use @ResponseBody annotation along
 * with @Controller annotation, it will return the data directly in a serialized 
 * format. Starting from Spring 4 and above, we can use @RestController annotation which 
 * is equivalent to using @Controller and @ResposeBody annotation
 */

@RestController
@CrossOrigin(origins="*")
public class UserAuthController {

    /*
	 * Autowiring should be implemented for the UserAuthService. (Use Constructor-based
	 * autowiring) Please note that we should not create an object using the new
	 * keyword
	 */
	
	@Autowired
	UserAuthService userAuthService;


	@GetMapping("/api/v1/auth/hello")
	public String testContoller() 
	{	
		return "hello boi";
	}
	

    /*
	 * Define a handler method which will create a specific user by reading the
	 * Serialized object from request body and save the user details in the
	 * database. This handler method should return any one of the status messages
	 * basis on different situations:
	 * 1. 201(CREATED) - If the user created successfully. 
	 * 2. 409(CONFLICT) - If the userId conflicts with any existing user, 
	 * UserAlreadyExistsException is caught.
	 * 
	 * This handler method should map to the URL "/api/v1/auth/register" using HTTP POST method
	 */
	@RequestMapping(value = "/api/v1/auth/register", method = RequestMethod.POST)

	public ResponseEntity<User> createUser(@RequestBody User user) {
		
		try {
			userAuthService.saveUser(user);
			return new ResponseEntity<User>(user,HttpStatus.CREATED);
		} catch (Exception e) {
			e.printStackTrace();
			User user1 = new User();
			return new ResponseEntity<User>(user1,HttpStatus.CONFLICT);
		}
	}


	/* 
	 * Define a handler method which will authenticate a user by reading the Serialized user
	 * object from request body containing the username and password. The username and password should be validated 
	 * before proceeding ahead with JWT token generation. The user credentials will be validated against the database entries. 
	 * The error should be return if validation is not successful. If credentials are validated successfully, then JWT
	 * token will be generated. The token should be returned back to the caller along with the API response.
	 * This handler method should return any one of the status messages basis on different
	 * situations:
	 * 1. 200(OK) - If login is successful
	 * 2. 401(UNAUTHORIZED) - If login is not successful
	 * 
	 * This handler method should map to the URL "/api/v1/auth/login" using HTTP POST method
	*/
    
    

	@RequestMapping(value = "/api/v1/auth/login", method = { RequestMethod.POST })

	public ResponseEntity<?> authenticateUser(@RequestBody User user) {
		User authenticateStatus;
		String temptoken=null;
		
		Token token = new Token();
		
		try {
			authenticateStatus = userAuthService.findByUserIdAndPassword(user.getUserId(),
					user.getPassword());
			if (authenticateStatus != null) {
				temptoken=GenerateToken(user.getUserId(),user.getPassword());
				token.setToken(temptoken);
				return new ResponseEntity<>(token, HttpStatus.OK);
			}
		} catch (UserNotFoundException e) {
		} catch (Exception e) {
		}
		return new ResponseEntity<>(token,HttpStatus.NOT_FOUND);
	}
	
	
	String GenerateToken(String username, String password) throws Exception{
		String token=null;
		
		token= Jwts.builder()
                .setSubject(username)
                .setIssuedAt(new Date())
                .signWith(SignatureAlgorithm.HS256,"nikitha")
                .compact();
//		token=Jwts.builder().setId(username).setSubject(password)
//		.signWith(SignatureAlgorithm.HS256, "nikitha").compact();
		return token;
	}
}
