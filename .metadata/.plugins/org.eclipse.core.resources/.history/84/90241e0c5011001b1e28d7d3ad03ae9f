package com.nikitha.fsd.gipher.test.controller;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.nikitha.fsd.gipher.controller.BookmarkController;
import com.nikitha.fsd.gipher.model.Gif;
import com.nikitha.fsd.gipher.model.User;
import com.nikitha.fsd.gipher.service.BookmarkService;

import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.http.MediaType;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.core.ProducerFactory;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import java.util.ArrayList;
import java.util.List;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;

@ExtendWith(SpringExtension.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@AutoConfigureMockMvc
public class BookmarkControllerTest {

    @LocalServerPort
    int randomServerPort;

    @Autowired
    private MockMvc mockMvc;
    private Gif gif;
    private User user;
    private List<Gif> isEmptyList; 
    @MockBean
    private BookmarkService bookmarkService;
    @InjectMocks
    private BookmarkController bookmarkController;
    private List<Gif> gifList = null;

	private ProducerFactory<Gif, String> producerFactory=null;
    private KafkaTemplate<Gif, String> kafkaTemplate = new KafkaTemplate<Gif, String>(producerFactory);


    @BeforeEach
    public void setUp() throws Exception {

        MockitoAnnotations.initMocks(this);
        mockMvc = MockMvcBuilders.standaloneSetup(bookmarkController).build();
        gif = new Gif();
        gif.setGifId("1");
        gif.setGifURL("www.gif.com");
        gif.setBookmarkCreatedAt();
        gifList = new ArrayList<>();
        gifList.add(gif);
        
        user = new User();
        user.setUserId("Nikitha");
        user.setGif(gifList);
        
        isEmptyList = new ArrayList<Gif>();
        
    }

    @Test
    public void bookmarkGifSucess() throws Exception {
        when(bookmarkService.addGif(any(),any())).thenReturn(true);
        mockMvc.perform(MockMvcRequestBuilders.post("/api/v1/bookmark/Nikitha/gif")
                .contentType(MediaType.APPLICATION_JSON).content(asJsonString(user)))
                .andExpect(MockMvcResultMatchers.status().isCreated())
                .andDo(MockMvcResultHandlers.print());

    }

    @Test
    public void bookmarkGifFailure() throws Exception {

    when(bookmarkService.addGif(any(),any())).thenReturn(false);
    mockMvc.perform(MockMvcRequestBuilders.post("/api/v1/bookmark/nikitha/gif")
            .contentType(MediaType.APPLICATION_JSON).content(asJsonString(user)))
                .andExpect(MockMvcResultMatchers.status().isConflict())
                .andDo(MockMvcResultHandlers.print());

    }


    @Test
    public void deleteBookMarkSuccess() throws Exception {
    	
        when(bookmarkService.deleteBookmark(user.getUserId(),gif.getGifId())).thenReturn(true);
        mockMvc.perform(MockMvcRequestBuilders.delete("/api/v1/bookmark/Nikitha/1")
                .contentType(MediaType.APPLICATION_JSON)).andExpect(MockMvcResultMatchers.status().isOk())
                .andDo(MockMvcResultHandlers.print());
    }


    @Test
    public void deleteNewssourceFailure() throws Exception {

        when(bookmarkService.deleteBookmark(user.getUserId(),gif.getGifId())).thenReturn(false);
        mockMvc.perform(MockMvcRequestBuilders.delete("/api/v1/bookmark/Nikitha/1")
                .contentType(MediaType.APPLICATION_JSON)).andExpect(MockMvcResultMatchers.status().isNotFound())
                .andDo(MockMvcResultHandlers.print());
    }



    @Test
    public void getAllGifsSuccess() throws Exception {
        when(bookmarkService.getAllGifs(user.getUserId())).thenReturn(gifList);
        mockMvc.perform(MockMvcRequestBuilders.get("/api/v1/bookmark/Nikitha")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(MockMvcResultMatchers.status().isFound());
    }


    @Test
    public void getAllGifsFailure() throws Exception {
        when(bookmarkService.getAllGifs(user.getUserId())).thenReturn(null);
        mockMvc.perform(MockMvcRequestBuilders.get("/api/v1/bookmark/Nikitha")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(MockMvcResultMatchers.status().isNotFound());
    }

    private static String asJsonString(final Object obj) {
        try {
        	ObjectMapper objmapper = new ObjectMapper();
        	objmapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
        	objmapper.registerModule(new JavaTimeModule());
            return objmapper.writeValueAsString(obj);
         } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}