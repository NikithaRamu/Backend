package com.nikitha.fsd.userprofile.service;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.stackroute.userprofile.model.UserProfile;
import com.stackroute.userprofile.repository.UserProfileRepository;
import com.stackroute.userprofile.util.exception.UserProfileAlreadyExistsException;
import com.stackroute.userprofile.util.exception.UserProfileNotFoundException;

/*
* Service classes are used here to implement additional business logic/validation 
* This class has to be annotated with @Service annotation.
* @Service - It is a specialization of the component annotation. It doesn't currently 
* provide any additional behavior over the @Component annotation, but it's a good idea 
* to use @Service over @Component in service-layer classes because it specifies intent 
* better. Additionally, tool support and additional behavior might rely on it in the 
* future.
* */

@Service
public class UserProfileServiceImpl implements UserProfileService {

	@Autowired
	UserProfileRepository userProfileRepository;
	
	
	public UserProfileServiceImpl(UserProfileRepository userProfileRepository) {
		
		this.userProfileRepository = userProfileRepository;
	}
	
	

	public UserProfileServiceImpl() {
	
	}



	/*
	 * Autowiring should be implemented for the UserProfileRepository. (Use
	 * Constructor-based autowiring) Please note that we should not create any
	 * object using the new keyword.
	 */

	/*
	 * This method should be used to save a new userprofile.Call the corresponding method
	 * of Respository interface.
	 */

    public UserProfile registerUser(UserProfile user) throws UserProfileAlreadyExistsException {
    	
		if (user != null) {
		
			user = userProfileRepository.insert(user);
			if (user == null) {
				throw new UserProfileAlreadyExistsException("user existing already in repo");
			} else {
				return user;
			}
		} else {
			return user;
		}
	}

	/*
	 * This method should be used to update a existing userprofile.Call the corresponding
	 * method of Respository interface.
	 */

    @Override
    public UserProfile updateUser(String userId, UserProfile user) throws UserProfileNotFoundException {
    	
    	Optional<UserProfile> userProfToUpdt = Optional.empty();
    	try
    	{
    		userProfToUpdt= userProfileRepository.findById(userId);
    		userProfToUpdt.get().setContact(user.getContact());
    		userProfToUpdt.get().setCreatedAt();
    		userProfToUpdt.get().setEmail(user.getEmail());
    		userProfToUpdt.get().setFirstName(user.getFirstName());
    		userProfToUpdt.get().setLastName(user.getLastName());
    		userProfileRepository.save(userProfToUpdt.get());
    	}
    	catch (Exception e) {
			throw new UserProfileNotFoundException("Prof not found");
		}
    	return userProfToUpdt.get();
    }

	/*
	 * This method should be used to delete an existing user. Call the corresponding
	 * method of Respository interface.
	 */

    @Override
    public boolean deleteUser(String userId) throws UserProfileNotFoundException {
    	
    	Boolean isDeleted = false;
    	try
    	{
    		getUserById(userId);
    		userProfileRepository.deleteById(userId);
    		isDeleted=true;
    	}
    	catch (Exception e) {
			throw new UserProfileNotFoundException("Prof not found");
		}
        return isDeleted;
    }
    
	/*
	 * This method should be used to get userprofile by userId.Call the corresponding
	 * method of Respository interface.
	 */

    @Override
    public UserProfile getUserById(String userId) throws UserProfileNotFoundException {
    	
    	Optional<UserProfile> userById = Optional.empty();
    	try
    	{
    		
    		userById = userProfileRepository.findById(userId);
    	}
    	
    	catch (Exception e) {
			throw new UserProfileNotFoundException("No such profile found");
		}
    	
    	return userById.get();
    }
}
