package com.nikitha.fsd.auth.service;


import com.stackroute.user.model.User;
import com.stackroute.user.repository.UserAuthRepository;
import com.stackroute.user.util.exception.UserAlreadyExistsException;
import com.stackroute.user.util.exception.UserNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;


import java.util.Optional;

   /*
	* Service classes are used here to implement additional business logic/validation 
	* This class has to be annotated with @Service annotation.
	* @Service - It is a specialization of the component annotation. It doesn't currently 
	* provide any additional behavior over the @Component annotation, but it's a good idea 
	* to use @Service over @Component in service-layer classes because it specifies intent 
	* better. Additionally, tool support and additional behavior might rely on it in the 
	* future.
	*/

@Service
public class UserAuthServiceImpl implements UserAuthService {

	/*
	 * Autowiring should be implemented for the UserAuthRepository and SQL Operation.
	 * (Use Constructor-based autowiring) Please note that we should not create any
	 * object using the new keyword.
	 */

	/*
	 * This method should be used to find an existing User with correct password.
	 */
    
	
	@Autowired
	UserAuthRepository userAuthRepository;
	
	
	
    public UserAuthServiceImpl(UserAuthRepository userAuthRepository) {
		
		this.userAuthRepository = userAuthRepository;
	}

	@Override
    public User findByUserIdAndPassword(String userId, String password) throws UserNotFoundException {
		
		User userDetails = new User();
		try
		{
			userDetails= userAuthRepository.findByUserIdAndPassword(userId, password);
			if(userDetails==null) {
				throw new UserNotFoundException("User with details:"+userId+" is not found");
			}
		}
		catch (Exception e) {
			throw new UserNotFoundException("User with details:"+userId+" is not found");
		}
        return userDetails;
    }

	/*
	 * This method should be used to save a new User.
	 */
    
    @Override
    public boolean saveUser(User user) throws UserAlreadyExistsException {
    	Boolean isUserSaved=false;
    	try
    	{
    		Optional<User> existsingUser = userAuthRepository.findById(user.getUserId());
    		if(!existsingUser.isPresent() )
    		{
    			userAuthRepository.save(user);
				isUserSaved=true;
    		}
    		else
    		{
    			throw new UserAlreadyExistsException("User with username:"+user.getUserId()+" already exists");
    		}

    	}
    	catch (Exception e) {
    		throw new UserAlreadyExistsException("User with username:"+user.getUserId()+" already exists");
		}
        return isUserSaved;
    }
}
