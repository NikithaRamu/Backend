package com.nikitha.fsd.userprofile.controller;


import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import com.stackroute.userprofile.model.UserProfile;
import com.stackroute.userprofile.service.UserProfileService;
import com.stackroute.userprofile.util.exception.UserProfileNotFoundException;


/*
 * As in this assignment, we are working on creating RESTful web service, hence annotate
 * the class with @RestController annotation. A class annotated with the @Controller annotation
 * has handler methods which return a view. However, if we use @ResponseBody annotation along
 * with @Controller annotation, it will return the data directly in a serialized 
 * format. Starting from Spring 4 and above, we can use @RestController annotation which 
 * is equivalent to using @Controller and @ResposeBody annotation
 */

@RestController
public class UserProfileController {

	/*
	 * Autowiring should be implemented for the UserService. (Use Constructor-based
	 * autowiring) Please note that we should not create an object using the new
	 * keyword
	 */

	@Autowired
	UserProfileService userProfileService;

	public UserProfileController(UserProfileService userProfileService) {
		
		this.userProfileService = userProfileService;
	}

	public UserProfileController() {

	}
	
    

	/*
	 * Define a handler method which will create a specific userprofile by reading the
	 * Serialized object from request body and save the user details in the
	 * database. This handler method should return any one of the status messages
	 * basis on different situations:
	 * 1. 201(CREATED) - If the userprofile created successfully. 
	 * 2. 409(CONFLICT) - If the userId conflicts with any existing user, return the 
	 * UserProfileAlreadyExistsException along with the status
	 * 
	 * This handler method should map to the URL "/api/v1/user" using HTTP POST method
	 */
   
	@RequestMapping(value="/api/v1/user",method = RequestMethod.POST)	
	public ResponseEntity<UserProfile> registerUser(@RequestBody UserProfile user )
	{	
		
		ResponseEntity <UserProfile>responseEntity =null;	
		UserProfile userProfCreated = null;
		
		try
		{

			
			user=userProfileService.registerUser(user);
			System.out.println(userProfCreated);
			
			if(user!=null)
	    	{
	    		responseEntity = new ResponseEntity<UserProfile>(user,HttpStatus.CREATED);
	    	}
	    	else
	    	{
	    		responseEntity = new ResponseEntity<UserProfile>(HttpStatus.CONFLICT);
	    	}

		
		}
		catch (Exception e) {
			responseEntity = new ResponseEntity<UserProfile>(HttpStatus.CONFLICT);
		}
    	

		return responseEntity;
	}


	/*
	 * Define a handler method which will update a specific userprofile by reading the
	 * Serialized object from request body and save the updated user details in a
	 * database. This handler method should return any one of the status messages
	 * basis on different situations: 
	 * 1. 200(OK) - If the userprofile is updated successfully.
	 * 2. 404(NOT FOUND) - If the userprofile with specified userId is not found,return the 
	 * UserProfileNotFoundException along with the status
	 * 
	 * This handler method should map to the URL "/api/v1/userprofile/{userid}" using HTTP PUT method.
	 */
	
	  @RequestMapping(value="/api/v1/userprofile/{userid}" ,method = RequestMethod.PUT)	
		 public  ResponseEntity<UserProfile> updateUser(@RequestBody UserProfile userprofile, @PathVariable String userid ) throws UserProfileNotFoundException
		 {
	    	Optional<UserProfile> userProfToUpdt=Optional.empty();
	   	 	ResponseEntity<UserProfile> responseEntity=null;
	   	 
	   	 try
	   	 {
	   		userProfToUpdt=Optional.ofNullable(userProfileService.updateUser(userid, userprofile));
	   	 
	  
	   	 if(userProfToUpdt.isPresent())
	   	 {
	   	
	   		responseEntity = new ResponseEntity<UserProfile>(userProfToUpdt.get(),HttpStatus.OK);
	   	 }
	   	 else
	   	 {
	   		 responseEntity = new ResponseEntity<UserProfile>(HttpStatus.NOT_FOUND);
	   	 }
	   	 }
	   	 catch (Exception e) {
	   		 responseEntity = new ResponseEntity<UserProfile>(HttpStatus.NOT_FOUND);
		}
			 return responseEntity;
		 }

	/*
	 * Define a handler method which will delete an userprofile from a database.
	 * This handler method should return any one of the status messages basis on
	 * different situations: 
	 * 1. 200(OK) - If the userprofile is deleted successfully from database. 
	 * 2. 404(NOT FOUND) - If the user with specified userId is not found, return 
	 * the UserProfileNotFoundException along with the status.
	 *
	 * This handler method should map to the URL "/api/v1/userprofile/{userId}" using 
	 * HTTP Delete method where "userId" should be replaced by a valid userId
	 * 
	 */
	  
	  @RequestMapping(value="/api/v1/userprofile/{userId}" ,method = RequestMethod.DELETE)	
		 public  ResponseEntity<UserProfile> deleteUser( @PathVariable String userId ) throws UserProfileNotFoundException
		 {
	    	Boolean isProfDel=false;
	   	 	ResponseEntity<UserProfile> responseEntity=null;
	   	 
	   	 	try
	   	 	{
	   	 isProfDel=userProfileService.deleteUser(userId);
	   	 
	  
	   	 if(isProfDel)
	   	 {
	   	
	   		responseEntity = new ResponseEntity<UserProfile>(HttpStatus.OK);
	   	 }
	   	 else
	   	 {
	   		 responseEntity = new ResponseEntity<UserProfile>(HttpStatus.NOT_FOUND);
	   	 }
	   	 	}
	   	 	catch (Exception e) {
	   	 	responseEntity = new ResponseEntity<UserProfile>(HttpStatus.NOT_FOUND);
			}
			 return responseEntity;
		 }

	/*
	 * Define a handler method which will show details of a specific user. This
	 * handler method should return any one of the status messages basis on
	 * different situations: 
	 * 1. 200(OK) - If the userprofile found successfully. 
	 * 2. 404(NOT FOUND) - If the userprofile with specified userId is not found, return 
	 * UserProfileNotFoundException message along with the status.
	 * This handler method should map to the URL "/api/v1/userprofile/{userId}" using 
	 * HTTP GET method where "id" should be replaced by a valid userId without {}.
	 */

	    @RequestMapping(value="/api/v1/userprofile/{userId}",method = RequestMethod.GET)
	    public ResponseEntity<UserProfile> getUserById (@PathVariable String userId) throws UserProfileNotFoundException 
	    {			
	    			Optional<UserProfile> userProfile = Optional.empty();
	    			ResponseEntity<UserProfile> responseEntity=null;
					
	    			try
	    			{
	    			userProfile = Optional.ofNullable(userProfileService.getUserById(userId));
	    			
	    			if(userProfile.isPresent())
	    			{
	    				responseEntity =  new ResponseEntity<UserProfile>(userProfile.get(),HttpStatus.OK);
	    			}
	    			else
	    			{
	    				responseEntity = new ResponseEntity<UserProfile>(HttpStatus.NOT_FOUND);
	    			}
	    			}
	    			catch (Exception e) {
	    				responseEntity = new ResponseEntity<UserProfile>(HttpStatus.NOT_FOUND);
					}
					
			return responseEntity;
	    }


}
